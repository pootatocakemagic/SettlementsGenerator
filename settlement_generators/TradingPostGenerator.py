from lib.rolls import *

class TradingPostGenerator:
    def __init__(self):
        self.total_info = ''
        self.modifier_visitor_traffic_roll = 0
        self.modifier_population_wealth_roll = 0
        self.modifier_quality_roll = 0
        self.modifier_size_roll = 0
        self.modifier_crime_roll = 0
        self.modifier_urban_encounter_roll = 0
        self.trading_post_size = 0
        self.is_good = False

        self.generate_total_info()


    def description_of_quality(self):
        quality = "Плохое. Место представляет собой некачественную версию того, что обычно ожидается. Его предложения, " \
                  "скорее всего, ограничены или плохого качества. Само место может быть в запущенном состоянии, " \
                  "грязным или иметь ряд других проблем.\nНормальное. Место представляет собой стандартный вариант того, " \
                  "что обычно ожидается. Его предложения, скорее всего, не ужасны, но часто и не особенно примечательны " \
                  "(хотя иногда могут быть и исключения). Само место, скорее всего, находится в исправном состоянии, " \
                  "хотя, вероятно, не безупречно.\nОтличное. Место представляет собой исключительную версию того, что " \
                  "обычно ожидается. Его предложения, вероятно, разнообразны или превосходят по качеству. Само место, " \
                  "вероятно, примечательно в каком-то смысле (или, возможно, во многих), например, очень чистое или " \
                  "добротно построенное."

        return quality

    def generate_quality(self):
        d12_equals = [[1, 4], [5, 10], [11, 12]]
        d12 = min(12, max(1, roll_dice(12, self.modifier_quality_roll)))
        quality = ["Плохое", "Нормальное", "Отличное"]
        meaning_roll = transformation_roll(d12, d12_equals) - 1
        return quality[meaning_roll]

    def generate_hired_help_size(self):
        d12_equals = [[1, 6], [7, 10], [11, 12]]
        hired_help_size = ["Отдельный человек. Наемник - это один человек, предоставляющий свои услуги. ",
                           "Команда. Наемники - это команда людей, которые работают вместе. ",
                           "Гильдия.Организованная гильдия нанимает свои услуги. При найме часть членов гильдии "
                           "выполняет работу, а не вся гильдия (если только работа не очень большая). "]
        meaning_roll = transformation_roll(roll_dice(12), d12_equals) - 1
        return hired_help_size[meaning_roll]

    def generate_total_info(self):
        basic_information = self.generate_basic_information()
        self.total_info += basic_information
        community = self.generate_community()
        self.total_info += community
        points_of_interest = self.generate_points_of_interest()
        self.total_info += points_of_interest
        extra_intrigue = self.generate_extra_intrigue()
        self.total_info += extra_intrigue

    def generate_extra_intrigue(self):
        recent_history = self.generate_recent_history()
        politics = self.generate_politics()
        events = self.generate_events()
        opportunities = self.generate_opportunities()
        weather = self.generate_weather()
        danger_level = self.generate_danger_level()
        danger_type = self.generate_danger_type()

        report = f'--------\nДополнительные подробности: \n--------\nНедавние события: {recent_history}\n' \
                 f'Политика: {politics}\nСобытия: {events}\n' \
                 f'Возможности: {opportunities}\nПогода: {weather}\n' \
                 f'Показатель опасности: {danger_level}\nХарактер опасности: {danger_type}\n\n'
        return report

    def generate_recent_history(self):
        """
        недавние события
        :return: string
        """
        recent_history = ["Благородство прошлых лет. Торговый пост управлялся доброжелательным лидером или советом, но "
                          "коррумпированный человек или группа захватили власть.",
                          "Строительство. Некоторые части торгового поста находились (или сейчас находятся) в стадии "
                          "строительства. Инструменты, строительные леса и другие подобные элементы все еще можно "
                          "увидеть, как и людей, работающих в течение дня.",
                          "Криминальный центр. Некоторые из пожилых людей помнят, как торговый пост находился под "
                          "управлением преступной организации, но некоторое время назад они были изгнаны.",
                          "Нейтралитет. Торговый пост всегда исповедовал нейтралитет, выделяя себя как безопасное "
                          "убежище, даже если на него оказывали давление близлежащие поселения.",
                          "Популярный производитель. Торговый пост был известен производством уникального и/или "
                          "популярного товара или услуги, которые сейчас недоступны или больше не пользуются спросом.",
                          "Разрушенный войной. Торговый пост был занят военными силами и понес ущерб во время военных "
                          "действий в недавнем прошлом."]

        return recent_history[roll_dice(6, -1)]

    def generate_politics(self):
        """
        политика торгового поста
        :return: string
        """
        politics = ["На грани войны. В воздухе витает напряженность, и слухи о надвигающемся конфликте можно услышать "
                    "в тишине торгового поста.",
                    "Регион беззакония. Поскольку торговый пост находится за пределами регулярно посещаемых границ "
                    "какого-либо королевства, общепринятые стандарты справедливости здесь, похоже, не действуют.",
                    "Захваченный. Противоборствующие вражеские силы окружают торговый пост со всех сторон, и он "
                    "оказывается в центре продолжающегося конфликта (хотя и не обязательно участвует в нем).",
                    "Революция. В соседнем королевстве происходит восстание. Представители любой из сторон могут "
                    "присутствовать в торговом пункте.",
                    "Мир. Все спокойно, почти подозрительно спокойно...",
                    "Новое правление. Новая и неизвестная власть установила контроль над окрестностями. Местные жители "
                    "могут быть за, против или нейтрально относиться к этому. В зависимости от типа правления, "
                    "высказывания против руководства могут быть запрещены."]

        return politics[roll_dice(6, -1)]

    def generate_events(self):
        """
        текущие события на торговом посте
        :return: string
        """
        events = ["Высокопоставленный посетитель. Богатый аристократ проезжает мимо и разбрасывает свои деньги. Ему "
                  "кажется, что все можно купить, и никакая цена не является слишком высокой.",
                  "Смутьяны. Компания хулиганов доставляет неудобства местным жителям. Враждебные столкновения "
                  "нарастают и могут перерасти в насилие.",
                  "Праздник дураков. Сегодня день дурака. Многие люди одеты как шуты и скоморохи. Напитки текут рекой, "
                  "настроение веселое",
                  "Пойман с поличным. Владелец магазина поймал вора и угрожает ему оружием на улице, пока тот "
                  "умоляет о пощаде.",
                  "Незнакомцы. Только что прибыл большой торговый караван, полный людей, которых местные жители "
                  "никогда не видели, и некоторые не знают, что с ними делать.",
                  "Чрезвычайное положение. В городе возникла чрезвычайная ситуация, например, пожар. Возникает "
                  "суматоха, люди спешат на помощь или посмотреть, что происходит."]

        return events[roll_dice(6, -1)]

    def generate_opportunities(self):
        opportunities = ["Политические интриги. Недавно пропал известный местный дворянин. Возможно, они проезжали "
                         "мимо и так и не добрались до места назначения? Возможно, никто даже не видел, как они уезжали..",
                         "Пропавший человек. Пропал местный житель, возможно, ребенок, и ходят разные слухи. Некоторые "
                         "говорят о чудовищах, но их шепот быстро опровергают, считая это сказками. У других есть "
                         "теории, но ни одна из них не принесла плодов.",
                         "Монстр. Монстр доставляет неприятности местным жителям. Кто-то в торговой лавке просит помощи, "
                         "чтобы справиться с ним.",
                         "Стража. Местной полиции нужны новые люди для предстоящего мероприятия, и способные "
                         "авантюристы - лучшие кандидаты.",
                         "Транспорт. Посетитель чувствует, что ему не рады, или по какой-то причине ему срочно нужно "
                         "уехать. Ему нужна помощь, чтобы уехать и добраться до места назначения.",
                         "Приобретение. Ходят слухи, что поблизости спрятан ценный предмет, возможно, связанный с "
                         "историей торгового поста. Несколько местных жителей заинтересованы в его приобретении, но "
                         "не все по одной и той же причине."]

        return opportunities[roll_dice(6, -1)]

    def generate_weather(self):
        d20_equals = [[1, 2], [3, 6], [7, 14], [15, 18], [19, 20]]
        weather = ["Отличная. Не по сезону отличная. Теплый день зимой, прохладный день летом и т.д.",
                   "Неплохая. Самый лучший день, который можно ожидать в этом сезоне. Дождь или снег небольшой, если "
                   "вообще идет. Ветер слабый.",
                   "Нормальная. Нормальный день для сезона. Дождь, снег или ветер средние и легко переносимые.",
                   "Тяжелая. Тяжелый день для сезона. Дождь, снег и ветер сильные и могут осложнить ситуацию",
                   "Скверная. Большинство людей остаются дома. Путешествовать в таких условиях опасно. Дождь проливной, "
                   "снег слепящий. Ветер может достигать ураганной силы."]
        meaning_roll = transformation_roll(roll_dice(20), d20_equals) - 1
        return weather[meaning_roll]

    def generate_danger_level(self):
        d20_equals = [[1, 2], [3, 6], [7, 14], [15, 18], [19, 20]]
        danger_level = ["Постоянная. Торговый пост постоянно находится в опасности. Столкновение с трудностями или "
                        "неприятностями в той или иной форме, когда вы находитесь в этом районе, почти гарантировано. "
                        "Никогда и никуда нельзя отправляться в одиночку. Подготовка и осторожность (даже на "
                        "территории торгового поста и вокруг него) имеют решающее значение.",
                        "Частая.Путешествовать вблизи торгового поста и не столкнуться с опасностью или угрозой - "
                        "большая редкость. Настоятельно рекомендуется подготовиться и быть осторожным.",
                        "Обыкновенная.Опасность или угроза - обычное явление. Рекомендуется подготовиться и соблюдать "
                        "осторожность.",
                        "Нечастая.Опасности или угрозы встречаются нечасто, однако рекомендуется подготовиться.",
                        "Редкая. Этот торговый пост построен в чрезвычайно безопасном месте; опасность или угроза - "
                        "большая редкость."]

        meaning_roll = transformation_roll(roll_dice(20), d20_equals) - 1
        return danger_level[meaning_roll]

    def generate_danger_type(self):
        danger_type = ["Подозрительные местные жители. Чужаки часто считаются недоверчивыми и могут быть главными "
                       "подозреваемыми в случае преступления.",
                       "Набеги. Торговый пост часто подвергается набегам близлежащих групп бандитов или стай "
                       "мародерствующих существ.",
                       "Монстр. Торговый пост терроризирует монстр, который бродит по окрестностям.",
                       "Окружающая среда. Окружающая среда, в которой существует торговый пост, опасна. Здесь могут "
                       "происходить частые землетрясения, извержения вулканов, наводнения, оползни, сход лавин, "
                       "частые штормы и т.п.",
                       "Культ. На территории торгового поста существует культ. Культ может быть известен и представлять "
                       "прямую форму угрозы, или же он может быть неизвестен, и опасность, которую он представляет, "
                       "может исходить из другого источника или не иметь связи с ним."]
        for d in danger_type:
            print(f'\n{d}')
        return danger_type[roll_dice(5, -1)]

    def generate_points_of_interest(self):
        number_of_shop_locations = self.generate_number_of_shop_locations()
        shops = self.generate_shops(number_of_shop_locations)
        number_of_service_location = self.generate_number_of_service_location()
        services = self.generate_services(number_of_service_location)
        place_of_worship = self.generate_place_of_worship()
        size_of_worship = self.generate_size_of_worship(place_of_worship)
        fervency_of_local_following = self.generate_fervency_of_local_following(place_of_worship)
        alignment = self.generate_alignment(place_of_worship)
        report = f'--------\nТочки интереса: \n--------\nОписание качества магазинов/услуг: \n{self.description_of_quality()}\n' \
                 f'\nКоличество магазинов: {number_of_shop_locations}\n\nМагазины: \n{shops}\n' \
                 f'Количество мест оказания услуг: {number_of_service_location}\n\nМеста оказания услуг: \n{services}' \
                 f'Места поклонения: {place_of_worship}\nРазмер места поклонения: {size_of_worship}\n' \
                 f'Степень религиозного почитания: {fervency_of_local_following}\nМировоззрение мест поклонения: {alignment}\n\n'
        return report

    def generate_number_of_shop_locations(self):
        """
        генератор количества магазинов в торговом посте
        :return: int
        """
        return roll_dice(8, (self.trading_post_size+1)*2)

    def generate_shops(self, number_of_shop_locations):
        """
        генератор типов магазинов существующих в данном торговом посте
        :param number_of_shop_locations: int
        :return: string
        """
        d100_equal = [[1, 4], [5, 8], [9, 12], [13, 16], [17, 24], [25, 28], [29, 36], [37, 40], [41, 44], [45, 48],
                      [49, 52], [53, 56], [57, 59], [60, 62], [63, 65], [66, 68], [69, 71], [72, 74], [75, 77], [78, 80],
                      [81, 82], [83, 84], [85, 86], [87, 88], [89, 90], [91, 92], [93, 94], [95, 96], [97, 98], [99, 100]]
        shops = [f"Булочная (О).Печет и продает свежий хлеб и, возможно, выпечку.",
                 f"Мясная лавка (О).Перерабатывает и продает свежее и/или сушеное мясо.",
                 f"Бондарь (О). Изготавливает деревянные сосуды, скрепленные металлическими обручами, включая бочки, "
                 f"ведра и т.д.",
                 f"Плотник (О). Строит или вырезает из дерева, а также занимается ремонтом.",
                 f"Обычный магазин (О).Продаёт предметы первой необходимости, продукты питания и различные мелочи.",
                 f"Травник (О). Продает обычные травы и натуральные, не магические лекарства.",
                 "Кузня (О).Продает и изготавливает металлические инструменты и снаряжение, включая самое "
                 "необходимое оружие и доспехи.",
                 "Портной (О). Изготавливает и продает одежду, включая шляпы и плащи. Также продает предметы общего "
                 "назначения из ткани, например, одеяла, и осуществляет ремонт и переделку изделий из ткани.",
                 "Кожевник/таксидермист (О). Обрабатывает шкуры животных для практических или декоративных целей.",
                 "Кровельщик (О). Строит крыши, используя слои высушенной соломы, тростника, камыша и т.д.",
                 "Каретных дел мастер (О). Изготавливает телеги и повозки.",
                 "Ткач (О).Плетёт необработанную ткань и корзины.",
                 "Алхимик (С). Варит и продает зелья, а также обычные травы и алхимические ингредиенты.",
                 "Художник (С). Включает в себя художника, скульптора и другие виды изобразительного искусства.",
                 "Банк и биржа (С).Охватывает аукционы, банковское дело, специфическую продажу драгоценных камней или "
                 "обмен валюты.",
                 "Сапожник (С).Делает и чинит сапоги и ботинки.",
                 "Литейное дело/плавильня (С). Обработка руды и изготовление металла.",
                 "Мельница (С).Предприятия по помолу зерна.",
                 "Текстильное производство (С). Масштабнее, чем у одного ткача, предлагает более широкий ассортимент "
                 "материалов в больших количествах.",
                 "Корабельщик (С). Строит и спускает на воду лодки и/или корабли. [Перебросить, если поселение не "
                 "граничит со значительным источником воды].",
                 "Редкие травы (Э). Выращивает и продает редкие для региона травы.",
                 "Предметы роскоши (Э). Закупает и продает всевозможные предметы для дома, включая мебель, предметы "
                 "искусства и другие высококачественные товары",
                 "Редкие напитки и блюда (Э).Продает (и, возможно, делает или варит) напитки и/или еду превосходного "
                 "качества или редкости для региона.",
                 "Редкие товары для торговли (Э). Закупает и продает редкие для региона предметы и материалы, такие как "
                 "руда или текстиль.",
                 "Магический магазин - доспехи (Э). Продает магические предметы с упором на доспехи и защитное снаряжение.",
                 "Магический магазин -Книги (Э). Продает магические предметы с упором на литературу, магические "
                 "справочники и предания. Они также могут продавать книги и документы (например, карты и записи) "
                 "редкого и значимого характера, хотя и немагического.",
                 "Магический магазин - одежда (Э). Продает магические предметы с упором на одежду всех типов, "
                 "обладающую магическими характеристиками.",
                 "Магический магазин - ювелирные изделия (Э). Продает магические предметы с упором на зачарованные или "
                 "пропитанные магией украшения",
                 "Магический магазин - оружие (Э). Продает магические предметы с упором на оружие с магическими "
                 "характеристиками и, возможно, щиты.",
                 "Магический магазин - различные предметы и диковинки (Э). Приобретает и продает магические предметы, "
                 "уделяя особое внимание странным и редким артефактам диковинного или интригующего характера."
                 ]
        total_shops = '\nТипы магазинов в торговом посте:\nОсновные(О): простые магазины, которые выполняют основные ' \
                      'функции, необходимые в поселении.\nСпециализированные(C): Магазины, торгующие товарами ' \
                      'определенной категории.\nЭкзотические(Э): магазины, торгующие редкими или очень необычными ' \
                      'товарами.\n\nВ данном торговом посте представлены следующие магазины:\n'
        for _ in range(number_of_shop_locations):
            meaning_roll = transformation_roll(roll_dice(100), d100_equal) - 1
            total_shops += shops[meaning_roll] + f" {self.generate_quality()}.\n"

        return total_shops

    def generate_number_of_service_location(self):
        """
        генератор количества мест оказания услуг
        :return: int
        """
        return roll_dice(6, self.trading_post_size)

    def generate_services(self, number_of_service_location):
        """
        генератор мест оказания услуг находящихся в данном торговом посте
        :param number_of_service_location: int
        :return: string
        """
        d100_equal = [[1, 8], [9, 16], [17, 24], [25, 32], [33, 44], [45, 52], [53, 60], [61, 68], [69, 80],
                      [81, 82], [83, 84], [85, 86], [87, 88], [89, 90], [91, 92], [93, 94], [95, 96], [97, 98],
                      [99, 100]]
        services = ["Парикмахерская. Предоставляет услуги по уходу, такие как стрижка или бритье.",
                    "Баня. Предоставляет места для купания.",
                    "Врач/аптекарь.Оказывает медицинскую помощь.",
                    "Дом отдыха.Предоставляет развлечения и/или отдых (ГМ может решить, какого рода).",
                    "Гостиница.Предоставляет жилье, а также место, где можно принять ванну и нормально поесть.",
                    "Клуб.Предоставляет развлечения в виде комедийных, драматических или музыкальных представлений.",
                    "Прорицатель.Предоставляет магические предсказания и пророчества!",
                    "Конюшня. Предоставляет жилье для лошадей, а также продает повозки, животных и их упряжь.",
                    "Таверна. Предоставляет еду и напитки.",
                    "Наемная помощь - Грубияны и дебоширы. Бандиты, грубияны и мускулистая сила.",
                    "Наемные помощники -Плащ и кинжал. Ассасины, воры и шпионы.",
                    "Наемные помощники -Луки и пращи. Лучники и специалисты по дальним атакам.",
                    "Наемные работники - писари и клерки. Мастера истории, литературы, математики и/или бизнеса.",
                    "Наемные помощники - проводники и следопыты. Скауты, рейнджеры и эксперты по дикой природе.",
                    "Наемные работники - караванщики и верховые. Специалисты по перевозкам и путешествиям в различные "
                    "места, а также по организации и управлению экспедициями.",
                    "Наемные помощники - академики магии. Эксперты в вопросах магии и знаний (может быть также природная"
                    " магия или что-то другое; не обязательно исключительно арканы).",
                    "Наемные работники -магические наемники. Специалисты, обученные использованию колдовской или не "
                    "божественной магии в бою и для решения практических задач.",
                    "Наемные помощники - священнослужители. Мудрецы, дающие советы по всем вопросам религии и "
                    "Божественности.",
                    "Наемная помощь - Руки Бога. Специалисты, обученные использованию божественной магии в бою и для "
                    "решения практических задач."
                    ]

        total_services = ''
        for _ in range(number_of_service_location):
            dice = roll_dice(100)
            meaning_roll = transformation_roll(dice, d100_equal) - 1

            total_services += services[meaning_roll] + f" {self.generate_quality()}."
            if dice >= 81:
                total_services += self.generate_hired_help_size()
            total_services += '\n'
        return total_services

    def generate_place_of_worship(self):
        """
        определение наличия мест поклонения
        :return: string
        """
        place_of_worship = ['Присутствует.', 'Отсутствует.']
        return place_of_worship[roll_dice(2, -1)]

    def generate_size_of_worship(self, place_of_worship):
        """
        размер места поклонения
        :param place_of_worship: string
        :return: string
        """
        if place_of_worship == 'Отсутствует.':
            return '-'
        else:
            d20_equals = [[1, 1], [2, 8], [9, 14], [15, 17], [18, 19], [20, 20]]
            size_of_worship = ["Секрет. Размер места поклонения неизвестен, так как его местоположение не разглашается.",
                               "Алтарь. Небольшое святилище или, возможно, крошечная хижина, в которой обычно "
                               "находятся различные предметы или изображения, относящиеся к тому, кого почитает данная "
                               "вера.",
                               "Молельня. Скромное здание с местами для посетителей, украшенное различными предметами "
                               "или изображениями, относящимися к почитаемой вере.",
                               "Святилище. Большое, хорошо обставленное строение, способное с комфортом разместить "
                               "до нескольких сотен человек.",
                               "Храм. Величественное здание, изобилующее такими элементами, как высокие потолки, "
                               "роскошная мебель и другие впечатляющие декоративные и/или архитектурные особенности. "
                               "Он может вместить около тысячи человек.",
                               "Великий храм. Внушающее благоговение сооружение, посвященное тому, что он почитает. "
                               "При его строительстве не пожалели средств. В нем могут присутствовать такие элементы, "
                               "как потрясающие фрески, сложные витражи и возвышающиеся позолоченные статуи. Попасть в "
                               "великий храм - редкое и яркое событие для тех, кто не живет рядом с ним."
                               ]

            meaning_roll = transformation_roll(roll_dice(20), d20_equals) - 1
            return size_of_worship[meaning_roll]

    def generate_fervency_of_local_following(self, place_of_worship):
        """
        степень религиозного почитания
        :param place_of_worship: string
        :return: string
        """
        if place_of_worship == 'Отсутствует.':
            return '-'
        else:
            d20_equals = [[1, 3], [4, 7], [8, 12], [13, 16], [17, 19], [20, 20]]
            fervency_of_local_following = ["Незаметная. Для тех, кто не является последователем, не ясно, "
                                           "что они существуют.",
                                           "Молчаливая. Приверженцы веры незаметны, если только не знать, что искать "
                                           "(возможно, особые жесты, предметы одежды или фразы)",
                                           "Сдержанная.Последователи веры могут быть узнаваемы, но остаются очень "
                                           "сдержанными.",
                                           "Умеренная. Благочестивые люди уверены в себе и не боятся открыто "
                                           "демонстрировать свою веру, но не посягают на широкие слои населения без "
                                           "необходимости.",
                                           "Пылкая. Последователи откровенны, почти не боятся упреков. Они могут "
                                           "воспевать или выступать перед массами.",
                                           "Ревностное.Приверженцы абсолютно и бездумно набожны, навязывают свою "
                                           "доктрину своему окружению и сверстникам или предпринимают действия, "
                                           "способствующие продвижению их дела, невзирая на личные жертвы. Хотя это "
                                           "обычно воспринимается как негативное явление, однако оно может быть и "
                                           "позитивным, например, церковь спасения восстает в злом царстве, помогая "
                                           "нуждающимся, даже если это подвергает опасности их самих."
                                        ]

            meaning_roll = transformation_roll(roll_dice(20), d20_equals) - 1
            return fervency_of_local_following[meaning_roll]

    def generate_alignment(self, place_of_worship):
        """
        мировоззрение мест поклонения
        :param place_of_worship: string
        :return: string
        """
        if place_of_worship == 'Отсутствует.':
            return '-'
        else:
            d6_equals = [[1, 1], [2, 5], [6, 10]]
            alignment = ["Злое", "Нейтральное", "Доброе"]
            meaning_roll = transformation_roll(roll_dice(6), d6_equals) - 1
            return alignment[meaning_roll]


    def generate_community(self):
        resident_population = self.generate_resident_population()

        demographics = self.generate_demographics()
        disposition = self.generate_disposition()
        law_enforcement = self.generate_law_enforcement()
        leadership = self.generate_leadership()
        population_wealth = self.generate_population_wealth()
        crime = self.generate_crime()
        report = f'--------\nОбщество\n--------\nКоличество проживающего населения: {resident_population}\n' \
                 f'Демография: {demographics}\n' \
                 f'Отношение: {disposition}\nПравопорядок: {law_enforcement}\nРуководство: {leadership}\n' \
                 f'Богатство населения: {population_wealth}\nПреступность: {crime}\n\n'
        return report

    def generate_resident_population(self):
        """
        генерация количества проживающего населения
        :return: string
        """
        d20_equals = [[1, 2], [3, 6], [7, 14], [15, 18], [19, 20]]
        resident_population = ["Почти безлюдно. Много пустых домов и предприятий.",
                               "Малолюдно. Есть несколько пустых домов и предприятий.",
                               "Подходящая. Дома и предприятия комфортно заселены.",
                               "Многолюдно. Движение затруднено. Дома и общие здания часто переполнены.",
                               "Чрезмерная. Торговый пост не может обслуживать такое количество людей. Передвижение "
                               "крайне затруднено. На окраинах поселения выросли палаточные городки и хибары."]
        meaning_roll = transformation_roll(roll_dice(20), d20_equals) - 1
        self.modifier_crime_roll += 2 - meaning_roll
        return resident_population[meaning_roll]

    def generate_visitor_traffic(self):
        """
        здесь генерируется поток посетителей.

        :return:
        """
        d20_equals = [[1, 2], [3, 6], [7, 14], [15, 18], [19, 20]]
        visitor_traffic = ["Безлюдно.Похоже, никто не посещает это место.",
                           "Группы. Посетители - это редкость, но несколько человек могут быть поблизости.",
                           "Многолюдно. Как правило, каждый день можно увидеть несколько новых посетителей.",
                           "Толпы. Регулярно появляется много новых лиц.",
                           "Массы. Новые люди повсюду, постоянно приходят и уходят."
                           ]
        d20 = min(20, max(1, roll_dice(20, self.modifier_visitor_traffic_roll)))
        meaning_roll = transformation_roll(d20, d20_equals) - 1
        self.modifier_size_roll += meaning_roll
        self.modifier_crime_roll += 2 - meaning_roll
        return visitor_traffic[meaning_roll]

    def generate_demographics(self):
        """
        генерация демографии(кто населяет торговый пост)
        :return: string
        """
        d20_equals = [[1, 5], [6, 10], [11, 14], [15, 17], [18, 19], [20, 20]]
        demographics = ["Только одна.100% основная раса.",
                        "Только две. 60% основной расы, 40% вторичной расы.",
                        "Нормальное распределение. 50% первичная раса, 25% вторичная раса, 15% третичная раса, "
                        "10% другие.",
                        "Широкое распределение. 20% первичной расы. Все остальные представлены достаточно хорошо.",
                        "Высокий и низкий уровень. 80% первичной расы, 20% вторичной расы.",
                        "Постоянно меняющаяся. Нет четкого распределения. Расовое представительство лишено "
                        "ощущения численного доминирования."]
        meaning_roll = transformation_roll(roll_dice(20), d20_equals) - 1
        return demographics[meaning_roll]

    def generate_disposition(self):
        """
        генерация отношения жителей к посетителям
        :return:
        """
        d20_equals = [[1, 2], [3, 6], [7, 14], [15, 18], [19, 20]]
        disposition = ["Враждебность. Местные жители выглядят очень недружелюбно по отношению к приезжим и, "
                       "скорее всего, заставят чужаков чувствовать себя нежеланными гостями. Это может проявляться"
                        "как холодность, пассивная агрессивность или даже насилие.",
                       "Недружелюбие. Местные жители не слишком дорожат приезжими, смотрят на них с презрением, "
                       "страхом или подозрением.",
                       "Нейтральность. Местные жители замкнуты или, возможно, неприветливы внешне, но могут быть "
                       "дружелюбными, если вы узнаете их получше.",
                       "Дружелюбие. Местные жители в целом дружелюбны, приветливы и не спешат обижаться.",
                       "Радушие. Местные жители активно радуются гостям, и их культура это демонстрирует. "
                       "Здесь рады практически всем."
                       ]
        meaning_roll = transformation_roll(roll_dice(20), d20_equals) - 1

        return disposition[meaning_roll]

    def generate_law_enforcement(self):
        """
        генерация системы правопорядка торгового поста
        :return: string
        """
        d20_equals = [[1, 2], [3, 6], [7, 14], [15, 18], [19, 20]]
        law_enforcement = ["Отсутствует. Это может быть хорошо или плохо, в зависимости от точки зрения. Хорошо, "
                           "если народ здесь просто таков. Плохо, когда самосуд вершится над мелким воришкой.",
                           "Шериф.Один шериф и его помощник поддерживают мирную жизнь",
                           "Небольшой местный дозор. Шериф, помощник шерифа и горстка жителей-добровольцев "
                           "составляют символический дозор.",
                           "Хорошо экипированный дозор.Правоохранительные органы распространены.",
                           "Чрезмерное присутствие.Правоохранительные органы всегда рядом."]
        meaning_roll = transformation_roll(roll_dice(20), d20_equals) - 1
        self.modifier_crime_roll += 4*(meaning_roll-2)

        return law_enforcement[meaning_roll]

    def generate_leadership(self):
        """
        генерация руководства торгового поста
        :return: stirng
        """
        d20_equals = [[1, 1], [2, 4], [5, 7], [8, 10], [11, 13], [14, 16], [17, 19], [20, 20]]
        oligarchy = ["купцы (плутократия)", "маги (магократия)", "жрецы(теократия)", "другая небольшая группа."]
        leadership = ["Нет лидера. Торговый пост работает без руководства, что может привести к возникновению "
                      "неразрешимых споров.",
                      "Наследничество. Неизбираемый лидер находится у власти в силу своей родословной.",
                      "Купеческая монархия. Самый богатый владелец магазина в торговом пункте возглавляет "
                      "его по умолчанию.",
                      "Преступный мир или преступное предприятие. Преступник или группа преступников, "
                      "публично или частным образом, контролирует торговый пост.",
                      f"Олигархия. Несколько человек коллективно управляют торговым постом {oligarchy[roll_dice(4, -1)]}",
                      "Местный совет. Выдающиеся члены общины выбирались для коллективного руководства торговым пунктом.",
                      "Избранный лидер. Местные жители демократическим путем голосовали за своего нынешнего лидера.",
                      "Анархо-синдикалистская коммуна. Члены торгового поста по очереди выполняют роль своего рода "
                      "исполнительного директора в течение недели."]
        meaning_roll = transformation_roll(roll_dice(20), d20_equals) - 1

        return leadership[meaning_roll]

    def generate_population_wealth(self):
        """
        генерация уровня богатства населения торгового поста
        :return: string
        """
        d20_equals = [[1, 2], [3, 6], [7, 14], [15, 17], [18, 19], [20, 20]]
        crime_mods = [-4, -2, 0, -1, -2, -4]
        quality_mods = [-2, -1, 0, 0, 2, 3]
        population_wealth = ["Обездоленность. Большинству населения постоянно не хватает самого необходимого для "
                             "выживания.",
                             "Нищенство.Около половины населения с трудом сводит концы с концами.",
                             "Средний достаток. Большинству населения хватает на скромную жизнь.",
                             "Процветание. Большинство населения имеет достаточно средств для хорошей жизни, а "
                             "некоторые из них даже могут жить безбедно.",
                             "Богатство.Почти у всех есть все необходимое для комфортной жизни, многие могут "
                             "жить хорошо, а некоторые очень процветают.",
                             "Достаток.Почти все могут жить комфортно, значительная часть живет в роскоши."]
        d20 = min(20, max(1, roll_dice(20, self.modifier_population_wealth_roll)))
        meaning_roll = transformation_roll(d20, d20_equals) - 1
        self.modifier_crime_roll += crime_mods[meaning_roll]
        self.modifier_quality_roll += quality_mods[meaning_roll]

        return population_wealth[meaning_roll]

    def generate_crime(self):
        """
        генерация уровня преступности населения торгового поста
        :return:
        """
        d20_equals = [[1, 2], [3, 6], [7, 14], [15, 18], [19, 20]]
        crime = ["Регулярная. Улицы кишат преступниками, и не пристегнутая сумочка почти наверняка будет украдена.",
                 "Распространенная. Большинство привыкло слышать о неприятностях каждый день или два. Каждый "
                 "знает кого-то, кто стал жертвой преступления.",
                 "Обычная. Время от времени случаются кражи или легкое насилие. Лучше всего быть начеку.",
                 "Нечастая. Некоторые на торговом посту сталкивались с карманниками или слышали об ограблении, и "
                 "когда это происходит, это событие привлекает внимание.",
                 "Редкая. Большинство жителей торгового поста лично не сталкивались с преступностью и знают лишь "
                 "немногих людей, которые сталкивались"]
        meaning_roll = transformation_roll(roll_dice(20), d20_equals) - 1
        self.modifier_urban_encounter_roll += 4 - meaning_roll

        return crime[meaning_roll]

    def generate_basic_information(self):
        """
        Здесь генерируется основная информация о торговом посте
        :return: string
        """
        origin = self.generate_origin()
        specialty = self.generate_specialty()
        age = self.generate_age()
        condition = self.generate_condition()
        visitor_traffic = self.generate_visitor_traffic()
        size = self.generate_size()
        environment = self.generate_environment()
        report = f'--------\nОсновная информация: \n--------\nПроисхождение: {origin}\nСпециализация: ' \
                 f'{specialty}\nВозраст: {age}\n' \
                 f'Состояние: {condition}\nПоток посетителей: {visitor_traffic}\n' \
                 f'Размер: {size}\nОкружение: {environment}\n\n'
        return report

    def generate_origin(self):
        """
        генерация происхождения торгового поста.
        Как появился этот торговый пост? Некоторые торговые посты могли возникнуть как собрание повозок,
        припаркованных на перекрестке дорог, в то время как другие могли быть фермерским домом, где усталые путники
        могли укрыться от непогоды и купить несколько необходимых провизий.
        :return: string
        """
        origin_list = ["Случайность. Торговый пост появился в результате несчастного случая, например, "
                       "поломки каравана или ошибочного направления. То, что было создано для устранения последствий "
                       "аварии, в итоге стало торговым постом.",

                       "Деловое предприятие. Торговый пост был основан богатым предпринимателем специально для того, "
                       "чтобы с самого начала быть торговым постом.",

                       "Перекресток. Торговый пост находится на пересечении более чем одного крупного торгового пути.",

                       "Военный форпост. Торговый пост был построен на остатках старой крепости или сторожевой башни, "
                       "сооружения которой давно разрушены или перепрофилированы местными жителями.",

                       "Ничья земля. Торговый пост был создан как нейтральное место, где противоборствующие силы "
                       "могли бы приобретать товары, не вторгаясь на вражескую территорию.",

                       "Коренной житель. Торговый пост был основан кем-то из местных жителей, который увидел "
                       "потенциал в торговле с прохожими.",

                       "Ночная стоянка. Изначально торговый пост представлял собой один большой дом для ночлега усталых"
                       " путников, который вскоре вырос вместе со спросом на жилье.",

                       "Эксперт по дикой природе. Торговый пост возник, когда ловчий, охотник или проводник разбил "
                       "лагерь, чтобы помочь тем, кто проходил через эту местность."
                       ]

        return origin_list[roll_dice(8, -1)]

    def generate_specialty(self):
        """
        генерация специализации торгового поста.
        Специализация торгового поста - это основное, чем он известен. Торговые посты обычно предпочитают вещи,
        связанные с потоком товаров и информации. Здесь могут выращивать определенный урожай или изготавливать
        определенный товар. Они также могут быть известны благодаря услугам, на которых специализируются.

        :return: string
        """
        food_drinks = ["отличной и уникальной едой.",

                       "многочисленными и разнообразными высококачественными напитками."]

        hired_help = ["грубияны и дебоширы",
                      "плащ и кинжал",
                      "луки и пращи",
                      "писари и клерки",
                      "проводники и следопыты",
                      "караваны и верховые",
                      "академики(адепты) магии",
                      "маги-наёмники",
                      "священнослужители",
                      "руки Бога"
                      ]
        dice = roll_dice(6)
        if dice == 3:
            self.is_good = True
        specialty = ["Нетипичные способы доставки. Этот торговый пост известен тем, что имеет уникальные и эффективные "
                     "способы перевозки товаров.",

                     f"Еда и напитки. Этот торговый пост известен {food_drinks[roll_dice(2, -1)]}",

                     "Гостеприимство. Главный постоялый двор здесь особенно хорош, предлагая отличное обслуживание, "
                     "удобные комнаты и хорошую еду.",

                     "Информация. Этот торговый пост известен как источник достоверной информации. Возможно, они не "
                     "знают всего, но шансы найти здесь достоверные сплетни, предания, новости или интригующую "
                     "информацию велики.",

                     "Закупочные связи. Этот торговый пост известен тем, что здесь есть люди, умеющие находить вещи. "
                     "Если у них нет (или они не знают) того, что вы ищете, они могут направить вас к кому-нибудь, "
                     "кто это сделает.",

                     f"Недобросовестные исполнители. Этот торговый пост известен тем, что здесь есть люди, которые "
                     f"могут сделать практически все, что угодно, если цена будет подходящей. (генератор (Free Location: "
                     f"Service - Hired Help) сказал: {hired_help[roll_dice(10, -1)]}"
                     ]

        return specialty[roll_dice(6, -1)]

    def generate_age(self):
        """
        генерация возраста торгового поста.
        Торговые посты могут сильно различаться по возрасту, в зависимости от того, в какой части мира они расположены
        и насколько хорошо идут дела. В конце концов, главная цель торгового поста - предоставить место для торговли.
        Некоторые из них могут быть совсем новыми или настолько старыми, что дата их основания давно забыта. Со временем
        торговый пост мог расти и расширяться. Он также мог угаснуть, в зависимости от обстоятельств, связанных с его
        местоположением.
        :return: string
        """
        modifiers_visitor_traffic = [-1, 0, 1, 2, 3, 4]
        d20_equals = [[1, 3], [4, 8], [9, 13], [14, 17], [18, 19], [20, 20]]
        age = ["Новый. Торговый пост был основан в течение последнего года.",

               "Недавний. Торговый пост существует по крайней мере несколько лет.",

               "Устоявшийся. Торговый пост был построен несколько десятилетий назад.",

               "Старый. Торговый пост был построен около ста лет назад.",

               "Древний. Торговый пост был построен сотни лет назад.",

               "Неустановленный. Никто точно не знает, когда был основан торговый пост."
               ]
        meaning_roll = transformation_roll(roll_dice(20), d20_equals) - 1
        self.modifier_visitor_traffic_roll += modifiers_visitor_traffic[meaning_roll]
        return age[meaning_roll]

    def generate_condition(self):
        """
        генерация состояния торгового поста.
        Состояние торгового поста служит сигналом для путешественников: радушный прием или наоборот, предупреждение.
        Торговый пост может быть красивым, со свежей краской и чистыми дорожками, или грязным и разваливающимся.
        Приведенная ниже таблица относится к состоянию зданий, дорог и других элементов торгового поста.

        :return:
        """
        d20_equals = [[1, 2], [3, 6], [7, 14], [15, 18], [19, 20]]
        modifiers_population_wealth = [-6, -3, 0, 3, 6]
        condition = ["Ветхое. Несколько зданий выглядят разваливающимися. Официальных дорог нет, только протоптанные "
                     "тропинки.",

                     "Бедность. Здания и окрестности неухоженные и грязные. Дороги неровные и пыльные.",

                     "Порядочное. Здания чистые и немного украшены. Дороги - выровненная земля, возможно, с гравием.",

                     "Хорошее. Большинство строений ухожены и умеренно украшены. Дороги вымощены булыжником или, "
                     "возможно, дешевым кирпичом.",

                     "Безупречное. Магазины и дома выглядят очень хорошо и украшены со вкусом. Дороги сделаны из "
                     "прекрасных, гладких, хорошо уложенных камней."
                     ]
        meaning_roll = transformation_roll(roll_dice(20), d20_equals) - 1
        self.modifier_population_wealth_roll += modifiers_population_wealth[meaning_roll]

        return condition[meaning_roll]

    def generate_size(self):
        """
        генерация размера торгового поста
        :return:
        """
        d20 = min(20, max(1, roll_dice(20, self.modifier_size_roll)))
        d20_equals = [[1, 2], [3, 6], [7, 14], [15, 18], [19, 20]]
        size = ["Очень маленький. До 20 отдельных строений.",
                "Маленький. До 40 отдельных строений.",
                "Средний. До 60 отдельных строений.",
                "Большой.До 80 отдельных строений.",
                "Очень большой. До 100 отдельных строений."]
        meaning_roll = transformation_roll(d20, d20_equals) - 1
        self.trading_post_size = meaning_roll
        return size[meaning_roll]

    def generate_environment(self):
        """
        генерация окружающей среды торгового поста.
        :return: string
        """
        environment = ["Побережье. Торговый пост находится рядом с большим водоемом, таким как озеро или океан.",
                       "Лес. Торговый пост расположен среди деревьев.",
                       "Горы. Торговый пост находится на каменистых перевалах или вздымающихся вершинах.",
                       "Равнина. Торговый пост находится на широких, открытых полях.",
                       "Река. Торговый пост находится рядом с постоянно текущей рекой или другим водотоком.",
                       "Болото. Торговый пост находится на обширной территории с застойной водой или рядом с ней.",
                       "Подземье. Торговый пост находится внутри большой сети пещер.",
                       "Долина. Торговый пост находится в пределах или на краю территории с пониженной высотой по "
                       "отношению к окружающему ландшафту.",
                       "Тундра. Торговый пост находится в очень холодной среде.",
                       "Пустыня. Торговый пост находится в сухой и засушливой местности, вероятно, "
                       "покрытой огромными песчаными дюнами."]

        return environment[roll_dice(10, -1)]

